namespace libxl;

var libxl32 = _dll;

namespace Book{

	Load			= libxl32.api("xlBookLoad","int(ptr BookHandle, STRING filename)")
	Save			= libxl32.api("xlBookSave","bool(ptr BookHandle, STRING filename)")
		
	LoadRaw			= libxl32.api("xlBookLoadRaw","int(ptr BookHandle, string data, INT size)")
	SaveRaw			= libxl32.api("xlBookSaveRaw","int(ptr BookHandle, pointer& data, INT& size)")
		
	AddSheet		= libxl32.api("xlBookAddSheet","ptr(ptr BookHandle, ustring name, ptr initSheet)") //SheetHandle
	InsertSheet		= libxl32.api("xlBookInsertSheet","ptr(ptr BookHandle, int index, ustring name, ptr initSheet)") //SheetHandle
	GetSheet		= libxl32.api("xlBookGetSheet","ptr(ptr BookHandle, int index)") //SheetHandle
	SheetType		= libxl32.api("xlBookSheetType","int(ptr BookHandle, int index)")
	DelSheet		= libxl32.api("xlBookDelSheet","int(ptr BookHandle, int index)")
	SheetCount		= libxl32.api("xlBookSheetCount","int(ptr BookHandle)")
		
	AddFormat		= libxl32.api("xlBookAddFormat","ptr(ptr BookHandle, ptr initFormat)") //FormatHandle,initFormat为ptr
	AddFont			= libxl32.api("xlBookAddFont","ptr(ptr BookHandle, ptr initFont)") //FontHandle,initFont为ptr
	
	Format			= libxl32.api("xlBookFormat","ptr(ptr BookHandle, int index)")//FormatHandle,
	FormatSize		= libxl32.api("xlBookFormatSize","int(ptr BookHandle)")
	Font			= libxl32.api("xlBookFont","ptr(ptr BookHandle, int index)")//FontHandle,
	FontSize		= libxl32.api("xlBookFontSize","int(ptr BookHandle)")
	
	ActiveSheet		= libxl32.api("xlBookActiveSheet","int(ptr BookHandle)")
	SetActiveSheet	= libxl32.api("xlBookSetActiveSheet","void(ptr BookHandle, int index)")
	PictureSize		= libxl32.api("xlBookPictureSize","int(ptr BookHandle)")
	GetPicture		= libxl32.api("xlBookGetPicture","int(ptr BookHandle, int index, pointer& data, INT& size)")
	AddPicture		= libxl32.api("xlBookAddPicture","int(ptr BookHandle, ustring filename)")
	AddPicture2		= libxl32.api("xlBookAddPicture2","int(ptr BookHandle, string data, INT size)")
		
	DefaultFont		= libxl32.api("xlBookDefaultFont","ustring(ptr BookHandle, INT& fontSize)")
	SetDefaultFont	= libxl32.api("xlBookSetDefaultFont","void(ptr BookHandle, ustring fontName, INT fontSize)")
	
	RgbMode			= libxl32.api("xlBookRgbMode","int(ptr BookHandle)")
	SetRgbMode		= libxl32.api("xlBookSetRgbMode","void(ptr BookHandle, BYTE rgbMode)")
	RefR1C1			= libxl32.api("xlBookRefR1C1","int(ptr BookHandle)")
	SetRefR1C1		= libxl32.api("xlBookSetRefR1C1","void(ptr BookHandle, BYTE refR1C1)")
	BiffVersion		= libxl32.api("xlBookBiffVersion","int(ptr BookHandle)")
	IsDate1904		= libxl32.api("xlBookIsDate1904","int(ptr BookHandle)")
	SetDate1904		= libxl32.api("xlBookSetDate1904","void(ptr BookHandle, BYTE date1904)")
	IsTemplate		= libxl32.api("xlBookIsTemplate","int(ptr BookHandle)")
	SetTemplate		= libxl32.api("xlBookSetTemplate","void(ptr BookHandle, int tmpl)")
	SetKey			= libxl32.api("xlBookSetKey","void(ptr BookHandle, ustring name, ustring key)")
	SetLocale		= libxl32.api("xlBookSetLocale","int(ptr BookHandle, string locale)")
	ErrorMessage	= libxl32.api("xlBookErrorMessage","string(ptr BookHandle)")

	//不清楚-未添加
	AddCustomNumFormat	= libxl32.api("xlBookAddCustomNumFormat","int(ptr BookHandle, ustring customNumFormat)")
	CustomNumFormat 	= libxl32.api("xlBookCustomNumFormat", "ustring(ptr BookHandle,int fmt)")
	DatePack		= libxl32.api("xlBookDatePack","double(ptr BookHandle,int year, int month, int day,int hour, int min, int sec, int msec)")
	DateUnpack		= libxl32.api("xlBookDateUnpack","int(ptr BookHandle, double value,int& year, int& month, int& day,int& hour, int& min, int& sec, int& msec)")
	ColorPack		= libxl32.api("xlBookColorPack","int(ptr BookHandle, int red, int green, int blue)")
	ColorUnpack		= libxl32.api("xlBookColorUnpack","void(ptr BookHandle, int color, int& red, int& green, int& blue)")

}

/**intellisense()
_SHEETTYPE_SHEET=@0/*_SHEETTYPE_SHEET*/
_SHEETTYPE_CHART=@1/*_SHEETTYPE_CHART*/
_SHEETTYPE_UNKNOW=@2/*_SHEETTYPE_UNKNOW*/
end intellisense**/